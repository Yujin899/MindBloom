rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is admin
    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return request.auth != null && userDoc != null && userDoc.data.admin == true;
    }

    // Debug collection: allow the admin to access
    match /_debug/{docId} {
      allow create, update, delete, read: if isAdmin();
    }

    // User document: each user can read/write their own doc, admin can read all
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow update: if request.auth != null && (
        (request.auth.uid == userId && !('isAdmin' in request.resource.data)) || // Regular users can't modify isAdmin
        isAdmin() // Only admin can modify isAdmin field
      );
      allow delete: if isAdmin();

      // Subcollection: quizAttempts under users/{userId}
      match /quizAttempts/{attemptId} {
        allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow update, delete: if request.auth != null && (
          resource.data.userId == request.auth.uid || isAdmin()
        );
      }
    }

    // Top-level quizAttempts
    match /quizAttempts/{attemptId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // Subjects and nested quizzes
    match /subjects/{subjectId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
      
      match /quizzes/{quizId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
      }
    }
  }
}
